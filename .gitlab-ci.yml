# Node docker image on which this would be run
image: node:latest

cache:
  paths:
    - node_modules/

stages:
  - test
  - deploy_staging

# Job 1:
Test:
  stage: test
  script:
    - npm install
    - npm run test

# Job 2:
# Deploy to staging
Production:
  image: ruby:latest
  only:
    - master
  stage: deploy_staging
  script:
    - apt-get update -qy
    - apt-get install -y ruby-dev
    - gem install dpl
    - dpl --provider=heroku --app=$HEROKU_APP_NAME --api-key=$HEROKU_API_KEY


# # This file is a template, and might need editing before it works on your project.
# # To contribute improvements to CI/CD templates, please follow the Development guide at:
# # https://docs.gitlab.com/ee/development/cicd/templates.html
# # This specific template is located at:
# # https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Nodejs.gitlab-ci.yml

# # Official framework image. Look for the different tagged releases at:
# # https://hub.docker.com/r/library/node/tags/
# image: node:latest

# # Pick zero or more services to be used on all builds.
# # Only needed when using a docker container to run your tests in.
# # Check out: http://docs.gitlab.com/ee/ci/docker/using_docker_images.html#what-is-a-service
# services:
# #   - mysql:latest
# #   - redis:latest
#   - postgres:latest

# # This folder is cached between builds
# # http://docs.gitlab.com/ee/ci/yaml/README.html#cache
# cache:
#   paths:
#     - node_modules/

# test_async:
#   script:
#     - npm install
#     - node ./specs/start.js ./specs/async.spec.js

# test_db:
#   script:
#     - npm install
#     - node ./specs/start.js ./specs/db-postgres.spec.js
